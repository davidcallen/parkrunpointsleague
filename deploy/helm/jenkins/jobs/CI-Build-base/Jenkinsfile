podTemplate(label: 'mypod', 
	containers: [
		containerTemplate(name: 'git', image: 'alpine/git', ttyEnabled: true, command: 'cat'),
		containerTemplate(name: 'docker', image: 'docker', command: 'cat', ttyEnabled: true),
		containerTemplate(name: 'prpl-builder', image: "${env.PRPL_DOCKER_REGISTRY}prpl-builder", command: 'cat', ttyEnabled: true)
	],
	volumes: [
		hostPathVolume(mountPath: '/var/run/docker.sock', hostPath: '/var/run/docker.sock'),
	]
) {
	node('mypod') {
		stage('Check running containers') {
			container('docker') {
				sh """
					set -o errexit
					set -o nounset
					hostname
					hostname -i
					echo
					docker images | grep prpl- || true
				"""
			}
		}
		stage('Clone repository') {
			container('git') {
				sh """whoami
					set -o errexit
					set -o nounset
					hostname -i
					echo PWD=\$PWD
					git clone -b master https://github.com/davidcallen/parkrunpointsleague.git prpl
					ls -la prpl
					cd prpl/deploy/docker/image/prpl-builder
					touch xxxxxxxxxx-test.txt
					cd ../prpl-base
					touch xxxxxxxxxx-prpl-base.test
				"""
				
			}
		}
		stage('Build docker image : prpl-base : libtidy') {
			container('prpl-builder') {
			sh """
				echo '----------------------------------- Build libtidy --------------------------------------------'
				set -o errexit
				set -o nounset
				set +x
				echo PWD=\$PWD
				ARG_MAKE_JOBS=1
				ls -la
				cd prpl/deploy/docker/image/prpl-base
				[ ! -d lib-srcs ] && mkdir lib-srcs
				cd lib-srcs
				ls -la
				git clone https://github.com/htacg/tidy-html5 
				cd tidy-html5
				cd build/cmake
				cmake ../.. -DCMAKE_INSTALL_PREFIX=/prpl -DCMAKE_BUILD_TYPE=Release
				make install
				chmod -R 777 /prpl
				cd ../..
				[ ! -d build-output ] && mkdir build-output
				cd build-output
				cp -r /prpl/lib .
				cp -r /prpl/include .
				echo
				ls -la *
				echo
			"""
			}
		}
		stage('Build docker image : prpl-base : gumbo') {
			container('prpl-builder') {
			sh """
				echo '----------------------------------- Build gumbo --------------------------------------------'
				set +x
				echo PWD=\$PWD
				ARG_MAKE_JOBS=1
				ls -la
				cd prpl/deploy/docker/image/prpl-base
				[ ! -d lib-srcs ] && mkdir lib-srcs
				cd lib-srcs
				ls -la
				git clone https://github.com/google/gumbo-parser
				cd gumbo-parser
				./autogen.sh
				./configure --prefix=/prpl
				make -j \${ARG_MAKE_JOBS}
				make install
				chmod -R 777 /prpl
				cd ../..
				[ ! -d build-output ] && mkdir build-output
				cd build-output
				cp -r /prpl/lib .
				cp -r /prpl/include .
				echo
				ls -la *
				echo
			"""
			}
		}
		stage('Build docker image : prpl-base : poco') {
			container('prpl-builder') {
			sh """
				echo '----------------------------------- Build poco --------------------------------------------'
				set -o errexit
				set -o nounset
				set +x
				echo PWD=\$PWD
				ARG_MAKE_JOBS=1
				ls -la
				cd prpl/deploy/docker/image/prpl-base
				[ ! -d lib-srcs ] && mkdir lib-srcs
				cd lib-srcs
				ls -la
				export LD_LIBRARY_PATH=/lib64:/usr/lib64:/usr/local/lib64:/lib:/usr/lib:/usr/local/lib
				git clone -b poco-1.7.8 https://github.com/pocoproject/poco.git
				cd poco
				./configure --prefix=/prpl --everything --omit=Data/ODBC,Data/SQLite,PDF,MongoDB,ApacheConnector,CppParser,PageCompiler,ProGen,SevenZip --no-samples --no-tests
				echo Making with \${ARG_MAKE_JOBS} jobs...
				make -j \${ARG_MAKE_JOBS}
				make install
				chmod -R 777 /prpl
				cd ../..
				[ ! -d build-output ] && mkdir build-output
				cd build-output
				cp -r /prpl/lib .
				cp -r /prpl/include .
				echo
				ls -la *
				echo
			"""
			}
		}
		stage('Build docker image : prpl-base') {
			container('docker') {
				def shellScript = """
						set -o errexit
						set -o nounset
						set -x
						echo PWD=\$PWD
						ls -la
						cd prpl/deploy/docker/image/prpl-base
						ls -la build-output/*
						PRPL_DOCKER_IMAGE_NAME=prpl-base
						export PRPL_DOCKER_BUILD_DATE=`date`
						export PRPL_DOCKER_IMAGE_TAG=`date +%Y%m%d%H%M%S`
						echo \${PRPL_DOCKER_IMAGE_TAG} > DOCKER_IMAGE_TAG
						echo "Building image \${PRPL_DOCKER_IMAGE_NAME} for tag \${PRPL_DOCKER_IMAGE_TAG}"
						echo
						echo -e "\n----------------------------------- Build image  ---------------------------------------------\n"
						docker rmi \${PRPL_DOCKER_REGISTRY}\${PRPL_DOCKER_IMAGE_NAME} || true
						echo
						docker build \
							--tag=\${PRPL_DOCKER_REGISTRY}\${PRPL_DOCKER_IMAGE_NAME}:\${PRPL_DOCKER_IMAGE_TAG} \
							--tag=\${PRPL_DOCKER_REGISTRY}\${PRPL_DOCKER_IMAGE_NAME}:latest \
							--file=./Dockerfile .

						docker push \${PRPL_DOCKER_REGISTRY}\${PRPL_DOCKER_IMAGE_NAME}:\${PRPL_DOCKER_IMAGE_TAG}
						docker push \${PRPL_DOCKER_REGISTRY}\${PRPL_DOCKER_IMAGE_NAME}:latest
						echo
						docker images | grep prpl- || true
					"""
				if("${PRPL_DOCKER_REGISTRY}" != "")
				{
					docker.withRegistry("https://${PRPL_DOCKER_REGISTRY_HOSTNAME}", "gcr:${PRPL_GCP_PROJECT_NAME}")
					{
						sh(script: shellScript) 
					}
				}
				else
				{
					sh(script: shellScript) 
				}
			}
		}
	}
}
