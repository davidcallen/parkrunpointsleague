persistence:
  size: '2Gi'

agent:
  volumes:
    - type: HostPath
      hostPath: /var/run/docker.sock
      mountPath: /var/run/docker.sock
  podName: 'prpl-jenkins-agent'
  idleMinutes: 120

master:
#  runAsUser: 1000
#  fsGroup: 1000
  installPlugins:
    - kubernetes:1.16.5
    - workflow-aggregator:2.5
    - workflow-job:2.24
    - credentials-binding:1.19
    - git:3.10.1
    - greenballs:1.15
    - build-with-parameters:1.4
  healthProbes: true
  healthProbesTimeout: 120

  jobs:
    CI-Build-builder: |-
      <?xml version='1.1' encoding='UTF-8'?>
      <flow-definition plugin="workflow-job@2.32">
        <actions/>
        <description></description>
        <keepDependencies>false</keepDependencies>
        <properties/>
        <definition class="org.jenkinsci.plugins.workflow.cps.CpsFlowDefinition" plugin="workflow-cps@2.70">
          <script>
            podTemplate(label: 'mypod', containers: [
                containerTemplate(name: 'git', image: 'alpine/git', ttyEnabled: true, command: 'cat'),
                containerTemplate(name: 'docker', image: 'docker', command: 'cat', ttyEnabled: true),
              ],
              volumes: [
                hostPathVolume(mountPath: '/var/run/docker.sock', hostPath: '/var/run/docker.sock'),
              ]                         
              ) {
                node('mypod') {
                    stage('Check running containers') {
                        container('docker') {
                            sh """
                                hostname
                                hostname -i
                                echo
                                docker images | grep prpl- || true
                            """
                        }
                    }
                    stage('Clone repository') {
                        container('git') {
                            sh """whoami
                                hostname -i
                                echo PWD=\$PWD
                                git clone -b master https://github.com/davidcallen/parkrunpointsleague.git prpl
                                ls -la prpl
                                cd prpl/deploy/docker/image/prpl-builder
                                touch xxxxxxxxxx-test.txt
                                cd ../prpl-base
                                touch xxxxxxxxxx-prpl-base.test
                            """
                            
                        }
                    }
                    stage('Build docker image : prpl-builder') {
                        container('docker') {
                             sh """
                                 set +x
                                 set -x
                                 echo PWD=\$PWD
                                 ls -la
                                 cd prpl/deploy/docker/image/prpl-builder
                                 ls -la
                                 source ./docker-build-image.sh
                                 echo
                                 docker images | grep prpl- || true
                             """
                        }
                    }
                }
            }
          </script>
          <sandbox>true</sandbox>
        </definition>
        <triggers/>
        <disabled>false</disabled>

    CI-Build-base: |-
      <?xml version='1.1' encoding='UTF-8'?>
      <flow-definition plugin="workflow-job@2.32">
        <actions/>
        <description></description>
        <keepDependencies>false</keepDependencies>
        <properties/>
        <definition class="org.jenkinsci.plugins.workflow.cps.CpsFlowDefinition" plugin="workflow-cps@2.70">
          <script>
            podTemplate(label: 'mypod', podRetention: always(), containers: [
                containerTemplate(name: 'git', image: 'alpine/git', ttyEnabled: true, command: 'cat'),
                containerTemplate(name: 'docker', image: 'docker', command: 'cat', ttyEnabled: true),
                containerTemplate(name: 'prpl-builder', image: 'prpl-builder', command: 'cat', ttyEnabled: true)
              ],
              volumes: [
                hostPathVolume(mountPath: '/var/run/docker.sock', hostPath: '/var/run/docker.sock'),
              ]                         
              ) {
                node('mypod') {
                    stage('Check running containers') {
                        container('docker') {
                            sh """
                                hostname
                                hostname -i
                                echo
                                docker images | grep prpl- || true
                            """
                        }
                    }
                    stage('Clone repository') {
                        container('git') {
                            sh """whoami
                                hostname -i
                                echo PWD=\$PWD
                                git clone -b master https://github.com/davidcallen/parkrunpointsleague.git prpl
                                ls -la prpl
                                cd prpl/deploy/docker/image/prpl-builder
                                touch xxxxxxxxxx-test.txt
                                cd ../prpl-base
                                touch xxxxxxxxxx-prpl-base.test
                            """
                            
                        }
                    }
                    stage('Build docker image : prpl-base : libtidy') {
                        container('prpl-builder') {
                             sh """
                                 echo '----------------------------------- Build libtidy --------------------------------------------'
                                 set +x
                                 ${params.debug} && set -x
                                 echo PWD=\$PWD
                                 ARG_MAKE_JOBS=1
                                 ls -la
                                 cd prpl/deploy/docker/image/prpl-base
                                 [ ! -d lib-srcs ] && mkdir lib-srcs
                                 cd lib-srcs
                                 ls -la
                                 git clone https://github.com/htacg/tidy-html5 \
                                    && cd tidy-html5 \
                                    && cd build/cmake \
                                    && cmake ../.. -DCMAKE_INSTALL_PREFIX=/prpl -DCMAKE_BUILD_TYPE=Release \
                                    && make install \
                                    && chmod -R 777 /prpl
                                 cd ../..
                                 [ ! -d build-output ] && mkdir build-output
                                 cd build-output
                                 cp -r /prpl/lib .
                                 cp -r /prpl/include .
                                 echo
                                 ls -la *
                                 echo
                             """
                        }
                    }
                    stage('Build docker image : prpl-base : gumbo') {
                        container('prpl-builder') {
                             sh """
                                 echo '----------------------------------- Build gumbo --------------------------------------------'
                                 set +x
                                 ${params.debug} && set -x
                                 echo PWD=\$PWD
                                 ARG_MAKE_JOBS=1
                                 ls -la
                                 cd prpl/deploy/docker/image/prpl-base
                                 [ ! -d lib-srcs ] && mkdir lib-srcs
                                 cd lib-srcs
                                 ls -la
                                 git clone https://github.com/google/gumbo-parser \
                                         && cd gumbo-parser \
                                         && ./autogen.sh \
                                         && ./configure --prefix=/prpl \
                                         && make -j \${ARG_MAKE_JOBS} \
                                         && make install \
                                         && chmod -R 777 /prpl
                                 cd ../..
                                 [ ! -d build-output ] && mkdir build-output
                                 cd build-output
                                 cp -r /prpl/lib .
                                 cp -r /prpl/include .
                                 echo
                                 ls -la *
                                 echo
                             """
                        }
                    }
                    stage('Build docker image : prpl-base : poco') {
                        container('prpl-builder') {
                             sh """
                                 echo '----------------------------------- Build poco --------------------------------------------'
                                 set +x
                                 ${params.debug} && set -x
                                 echo PWD=\$PWD
                                 ARG_MAKE_JOBS=1
                                 ls -la
                                 cd prpl/deploy/docker/image/prpl-base
                                 [ ! -d lib-srcs ] && mkdir lib-srcs
                                 cd lib-srcs
                                 ls -la
                                 export LD_LIBRARY_PATH=/lib64:/usr/lib64:/usr/local/lib64:/lib:/usr/lib:/usr/local/lib \
                                   && git clone -b poco-1.7.8 https://github.com/pocoproject/poco.git \
                                   && cd poco \
                                   && ./configure --prefix=/prpl --everything --omit=Data/ODBC,Data/SQLite,PDF,MongoDB,ApacheConnector,CppParser,PageCompiler,ProGen,SevenZip --no-samples --no-tests \
                                   && echo Making with \${ARG_MAKE_JOBS} jobs... \
                                   && make -j \${ARG_MAKE_JOBS} \
                                   && make install \
                                   && chmod -R 777 /prpl
                                 cd ../..
                                 [ ! -d build-output ] && mkdir build-output
                                 cd build-output
                                 cp -r /prpl/lib .
                                 cp -r /prpl/include .
                                 echo
                                 ls -la *
                                 echo
                             """
                        }
                    }
                    stage('Build docker image : prpl-base') {
                        container('docker') {
                            sh """
                                 echo -e '\n----------------------------------- Build image  ---------------------------------------------\n'
                                 cd prpl/deploy/docker/image/prpl-base
                                 ls -la build-output/*
                                 source ../../docker-config.sh
                                 # Common settings for build and publish docker images
                                 PRPL_DOCKER_IMAGE_NAME=prpl-base
                                 export PRPL_DOCKER_BUILD_DATE=`date`
                                 export PRPL_DOCKER_IMAGE_TAG=`date +%Y%m%d%H%M%S`
                                 echo \${PRPL_DOCKER_IMAGE_TAG} > DOCKER_IMAGE_TAG
                                 echo 'Building image \${PRPL_DOCKER_IMAGE_NAME} for tag \${PRPL_DOCKER_IMAGE_TAG}'
                                 docker rmi \${PRPL_DOCKER_REGISTRY}\${PRPL_DOCKER_IMAGE_NAME} || true
                                 echo
                                 docker build \
                                     --tag=\${PRPL_DOCKER_REGISTRY}\${PRPL_DOCKER_IMAGE_NAME}:\${PRPL_DOCKER_IMAGE_TAG} \
                                     --file=./Dockerfile .
                                 docker tag \${PRPL_DOCKER_REGISTRY}\${PRPL_DOCKER_IMAGE_NAME}:\${PRPL_DOCKER_IMAGE_TAG} \${PRPL_DOCKER_REGISTRY}\${PRPL_DOCKER_IMAGE_NAME}:latest
                                 echo
                                 docker images | grep prpl- || true 
                            """
                        }
                    }
                }
            }
          </script>
          <sandbox>true</sandbox>
        </definition>
        <triggers/>
        <disabled>false</disabled>


    CI-Build: |-
      <?xml version='1.1' encoding='UTF-8'?>
      <flow-definition plugin="workflow-job@2.32">
        <actions/>
        <description></description>
        <keepDependencies>false</keepDependencies>
        <properties/>
        <definition class="org.jenkinsci.plugins.workflow.cps.CpsFlowDefinition" plugin="workflow-cps@2.70">
          <script>
            podTemplate(label: 'mypod', containers: [
                containerTemplate(name: 'git', image: 'alpine/git', ttyEnabled: true, command: 'cat'),
                containerTemplate(name: 'docker', image: 'docker', command: 'cat', ttyEnabled: true),
                containerTemplate(name: 'prpl-builder', image: 'prpl-builder', command: 'cat', ttyEnabled: true)
              ],
              volumes: [
                hostPathVolume(mountPath: '/var/run/docker.sock', hostPath: '/var/run/docker.sock'),
              ]                         
              ) {
                node('mypod') {
                    stage('Check running containers') {
                        container('docker') {
                            sh """
                                hostname
                                hostname -i
                                echo
                                docker images | grep prpl || true
                            """
                        }
                    }
                    stage('Clone repository') {
                        container('git') {
                            sh """whoami
                                hostname -i
                                echo PWD=\$PWD
                                git clone -b master https://github.com/davidcallen/parkrunpointsleague.git prpl
                                ls -la prpl
                                cd prpl/deploy/docker/image/prpl-builder
                                touch xxxxxxxxxx-test.txt
                                cd ../prpl
                                touch xxxxxxxxxx-prpl.test
                            """
                            
                        }
                    }
                    stage('Build docker image : prpl : get libs and build') {
                        container('docker') {
                             sh """
                                 echo '----------------------------------- Get Libs --------------------------------------------'
                                 set +x
                                 cd prpl
                                 DOCKER_CONTAINER_ID=\$(docker create prpl-base:latest)
                                 docker cp \${DOCKER_CONTAINER_ID}:/prpl-libs/include .
                                 docker cp \${DOCKER_CONTAINER_ID}:/prpl-libs/lib .
                                 docker rm \${DOCKER_CONTAINER_ID}
                                 ${params.debug} && set -x
                                 echo PWD=\$PWD
                                 ARG_MAKE_JOBS=1
                                 ls -la
                             """
                        }
                    }
                    stage('Build docker image : prpl') {
                        container('prpl-builder') {
                             sh """
                                 echo '----------------------------------- Build prpl --------------------------------------------'
                                 set -o errexit
                                 set -o nounset
                                 set -x
                                 # ${params.debug} && set -x
                                 echo PWD=\$PWD
                                 ARG_MAKE_JOBS=2
                                 cd prpl
                                 ls -la lib
                                 ls -la include
                                 cd src
                                 ls -la
                                 export LD_LIBRARY_PATH=\$PWD/../lib:/lib64:/usr/lib64:/usr/local/lib64:/lib:/usr/lib:/usr/local/lib \
                                   && ./build.sh -clean -cpu \${ARG_MAKE_JOBS} \
                                   && rm -rf exe/prpld/CMakeFiles \
                                   && rm -f ../sql/db-backups/* \
                                   && chmod -R 777 ..
                                 cd ..
                                 echo
                                 ls -la bin/
                                 mkdir deploy/docker/image/prpl/build-output
                                 cp -r bin deploy/docker/image/prpl/build-output/
                                 cp -r lib deploy/docker/image/prpl/build-output/
                                 cp -r assets/ deploy/docker/image/prpl/build-output/
                                 cp -r sql/ deploy/docker/image/prpl/build-output/
                                 cp -r doc/ deploy/docker/image/prpl/build-output/
                                 echo
                             """
                        }
                    }
                    stage('Build docker image : prpl') {
                        container('docker') {
                            sh """
                                 echo -e '\n----------------------------------- Build image  ---------------------------------------------\n'
                                 cd prpl/deploy/docker/image/prpl
                                 ls -la build-output/*
                                 source ../../docker-config.sh
                                 # Common settings for build and publish docker images
                                 PRPL_DOCKER_IMAGE_NAME=prpl
                                 export PRPL_DOCKER_BUILD_DATE=`date`
                                 export PRPL_DOCKER_IMAGE_TAG=`date +%Y%m%d%H%M%S`
                                 echo \${PRPL_DOCKER_IMAGE_TAG} > DOCKER_IMAGE_TAG
                                 echo 'Building image \${PRPL_DOCKER_IMAGE_NAME} for tag \${PRPL_DOCKER_IMAGE_TAG}'
                                 docker rmi \${PRPL_DOCKER_REGISTRY}\${PRPL_DOCKER_IMAGE_NAME} || true
                                 echo
                                 docker build \
                                     --tag=\${PRPL_DOCKER_REGISTRY}\${PRPL_DOCKER_IMAGE_NAME}:\${PRPL_DOCKER_IMAGE_TAG} \
                                     --file=./Dockerfile .
                                 docker tag \${PRPL_DOCKER_REGISTRY}\${PRPL_DOCKER_IMAGE_NAME}:\${PRPL_DOCKER_IMAGE_TAG} \${PRPL_DOCKER_REGISTRY}\${PRPL_DOCKER_IMAGE_NAME}:latest
                                 echo
                                 docker images | grep prpl || true 
                            """
                        }
                    }
                }
            }
          </script>
          <sandbox>true</sandbox>
        </definition>
        <triggers/>
        <disabled>false</disabled>

